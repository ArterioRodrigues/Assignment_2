// KEYS //
Object.grabValues = function(object) {
    let arr = [];
    let i = 0;
    for(const property in object)
    {
        arr[i] = object[property];
        i++;
    }
    
    return arr;
};


const obj = { foo: 'bar', baz: 42 };
console.log(Object.grabValues(obj)); // ['bar', 42]

// Array-like object
const arrayLikeObj1 = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.grabValues(arrayLikeObj1 )); // ['a', 'b', 'c']

// Array-like object with random key ordering
// When using numeric keys, the values are returned in the keys' numerical order
const arrayLikeObj2 = { 100: 'a', 2: 'b', 7: 'c' };
console.log(Object.grabValues(arrayLikeObj2 )); // ['b', 'c', 'a']

// getFoo is property which isn't enumerable
const my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });
my_obj.foo = 'bar';
console.log(Object.grabValues(my_obj)); // ['bar']

// non-object argument will be coerced to an object
console.log(Object.grabValues('foo')); // ['f', 'o', 'o']